using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.Net.Sockets;
using System.Text;
using EntityLayer;

namespace DataBaseLayer
{
    public partial class Connection
    {
        private static string connectionDataBase = ConfigurationManager.ConnectionStrings["stringg"].ToString();
        //private static string connectionDataBase = "server=LAPTOP-CHQVIE2L\\MAR;database=MARKET_PRODUCTS_DATABASE;integrated security=true";
        private SqlConnection connection = new SqlConnection(connectionDataBase);
    }

    public partial class Connection //Admin
    {
        public List<Admin> listAdminReturn()
        {
            List<Admin> admins = new List<Admin>();
            connection.Open();
            try
            {
                    string query = "select* from ADMIN_MARKET_PRODUCTS";
                    SqlCommand command=new SqlCommand(query, connection);
                    command.CommandType = CommandType.Text;
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            admins.Add(new Admin()
                            {
                                Id = Convert.ToInt32(reader["IdAdmin"]),
                                nameAdmin = reader["NameAdmin"].ToString(),
                                lastNameAdmin = reader["LastNameAdmin"].ToString(),
                                emailAdmin = reader["EmailAdmin"].ToString(),
                                passwordAdmin = reader["PasswordAdmin"].ToString(),
                                resetPasswordAdmin = Convert.ToBoolean(reader["ResetPasswordAdmin"]),
                                activeAdminAccount = Convert.ToBoolean(reader["ActiveAdmin"])
                            }
                            );
                        }
                    }                
                
            }
            catch(Exception)
            {
                admins = new List<Admin>();
            }
            connection.Close();
            return admins;
        }
        
        public int CreateAdmin(Admin objAdmin,out string Result)
        {
            int autogeneratedID = 0;
            Result = string.Empty;
            try
            {
                SqlCommand command = new SqlCommand("SP_CREATE_ADMIN_MARKET_PRODUCTS",connection);
                command.Parameters.AddWithValue("NameAdmin", objAdmin.nameAdmin);
                command.Parameters.AddWithValue("LastNameAdmin", objAdmin.lastNameAdmin);
                command.Parameters.AddWithValue("EmailAdmin", objAdmin.emailAdmin);
                command.Parameters.AddWithValue("PasswordAdmin", objAdmin.passwordAdmin);
                command.Parameters.AddWithValue("ActiveAdmin", objAdmin.activeAdminAccount);
                command.Parameters.Add("MessageSystem",SqlDbType.VarChar,500).Direction = ParameterDirection.Output;
                command.Parameters.Add("ResultSP",SqlDbType.Int).Direction= ParameterDirection.Output;
                command.CommandType = CommandType.StoredProcedure;
                connection.Open();
                command.ExecuteNonQuery();
                autogeneratedID = Convert.ToInt32(command.Parameters["ResultSP"].Value);
                Result = Convert.ToString(command.Parameters["MessageSystem"].Value);
                connection.Close();

            }
            catch(Exception e)
            {
                autogeneratedID = 0;
                Result = e.Message;
            }
            
            return autogeneratedID;
        }
        
        public bool EditAdmin(Admin objAdmin,out string message)
        {
            bool result = false;
            message = string.Empty;
            try
            {
                SqlCommand command = new SqlCommand("SP_EDIT_ADMIN_MARKET_PRODUCTS", connection);
                command.Parameters.AddWithValue("IdAdmin", objAdmin.Id);
                command.Parameters.AddWithValue("NameAdmin", objAdmin.nameAdmin);
                command.Parameters.AddWithValue("LastNameAdmin", objAdmin.lastNameAdmin);
                command.Parameters.AddWithValue("EmailAdmin", objAdmin.emailAdmin);
                command.Parameters.AddWithValue("ActiveAdmin", objAdmin.activeAdminAccount);
                command.Parameters.Add("MessageSystem", SqlDbType.VarChar,500).Direction = ParameterDirection.Output;
                command.Parameters.Add("ResultSP", SqlDbType.Bit).Direction = ParameterDirection.Output;
                command.CommandType = CommandType.StoredProcedure;
                connection.Open();
                command.ExecuteNonQuery();
                message = Convert.ToString(command.Parameters["MessageSystem"].Value);
                result = Convert.ToBoolean(command.Parameters["ResultSP"].Value);
                connection.Close();
            }
            catch(Exception e)
            {
                message = e.Message;
            }
            return result;
        }

        public bool DeleteAdmin(int id,out string message)
        {
            bool result = false;
            message= string.Empty;
            try
            {
                SqlCommand command = new SqlCommand("SP_DELETE_ADMIN_MARKET_PRODUCTS", connection);
                command.Parameters.AddWithValue("IdAdmin", id);
                command.CommandType = CommandType.StoredProcedure;
                connection.Open();
                command.ExecuteNonQuery();
                connection.Close();
                result = true;
            }
            catch(Exception e) 
            { 
                result = false;
                message = e.Message;
            }
            return result;
        }
        // FALTA
        public bool UpdatePassword(int id,string newPassword, out string message)
        {
            bool result = false;
            message = string.Empty;
            try
            {
                SqlCommand command = new SqlCommand("UPDATE ADMIN_MARKET_PRODUCTS SET PasswordAdmin = @newPassword, ResetPasswordAdmin = 0 WHERE IdAdmin = @IdAdmin", connection);
                command.Parameters.AddWithValue("@IdAdmin", id);
                command.Parameters.AddWithValue("@newPassword", newPassword);
                command.CommandType = CommandType.Text;
                connection.Open();
                result = command.ExecuteNonQuery() > 0 ? true : false;
                connection.Close();
            }
            catch (Exception e)
            {
                result = false;
                message = e.Message;
            }
            return result;
        }

        public bool ResetPasswordAdmin(int id, string newPassword, out string message)
        {
            bool result = false;
            message = string.Empty;
            try
            {
                SqlCommand command = new SqlCommand("UPDATE ADMIN_MARKET_PRODUCTS SET PasswordAdmin = @newPassword, ResetPasswordAdmin = 1 WHERE IdAdmin = @IdAdmin", connection);
                command.Parameters.AddWithValue("@IdAdmin", id);
                command.Parameters.AddWithValue("@newPassword", newPassword);
                command.CommandType = CommandType.Text;
                connection.Open();
                result = command.ExecuteNonQuery() > 0 ? true : false;
                connection.Close();
            }
            catch (Exception e)
            {
                result = false;
                message = e.Message;
            }
            return result;
        }
    }

    public partial class Connection // Clients
    {
        public List<Client> listClientReturn()
        {
            List<Client> clients = new List<Client>();
            connection.Open();
            try
            {
                string query = "select* from CLIENT_MARKET_PRODUCTS";
                SqlCommand command = new SqlCommand(query, connection);
                command.CommandType = CommandType.Text;
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        clients.Add(new Client()
                        {
                            ID = Convert.ToInt32(reader["IdClient"]),
                            name = reader["NameClient"].ToString(),
                            email = reader["EmailClient"].ToString(),
                            password = reader["PasswordClient"].ToString(),
                            resetPassword = true,
                        }
                        );
                    }
                }

            }
            catch (Exception)
            {
                clients = new List<Client>();
            }
            connection.Close();
            return clients;
        }

        public int CreateClient(Client objClient, out string Result)
        {
            int autogeneratedID = 0;

            Result = string.Empty;

            try
            {
                SqlCommand command = new SqlCommand("SP_CREATE_CLIENT_MARKET_PRODUCTS", connection);
                command.Parameters.AddWithValue("NameClient", objClient.name);
                command.Parameters.AddWithValue("EmailClient", objClient.email);
                command.Parameters.AddWithValue("PasswordClient", objClient.password);
                command.Parameters.Add("MessageSystem", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                command.Parameters.Add("ResultSP", SqlDbType.Int).Direction = ParameterDirection.Output;
                command.CommandType = CommandType.StoredProcedure;
                connection.Open();
                command.ExecuteNonQuery();
                autogeneratedID = Convert.ToInt32(command.Parameters["ResultSP"].Value);
                Result = Convert.ToString(command.Parameters["MessageSystem"].Value);
                connection.Close();

            }
            catch (Exception e)
            {
                autogeneratedID = 0;
                Result = e.Message;
            }

            return autogeneratedID;
        }

        public bool ResetPasswordClient(int id, string newPassword, out string message)
        {
            bool result = false;
            message = string.Empty;
            try
            {
                SqlCommand command = new SqlCommand("UPDATE CLIENT_MARKET_PRODUCTS SET PasswordClient = @newPassword, ResetPasswordClient = 1 WHERE IdClient = @IdClient", connection);
                command.Parameters.AddWithValue("@IdClient", id);
                command.Parameters.AddWithValue("@newPassword", newPassword);
                command.CommandType = CommandType.Text;
                connection.Open();
                result = command.ExecuteNonQuery() > 0 ? true : false;
                connection.Close();
            }
            catch (Exception e)
            {
                result = false;
                message = e.Message;
            }
            return result;
        }
    }

    public partial class Connection // Products
    {
        public List<Product> listProductsReturn()
        {
            List<Product> products = new List<Product>();
            connection.Open();
            try
            {
                StringBuilder sb = new StringBuilder();
                sb.AppendLine("SELECT P.IdProduct,P.NameProduct,P.DescriptionProduct,C.IdCategory,C.DescriptionCategory,");
                sb.AppendLine("P.PriceProduct,P.StockProduct,P.NameImageProduct,P.RouteImageProduct,");
                sb.AppendLine("P.ActiveProduct FROM PRODUCT_MARKET_PRODUCTS P JOIN CATEGORY_MARKET_PRODUCTS C ON C.IdCategory=P.IdCategory");


                SqlCommand command = new SqlCommand(sb.ToString(), connection);
                command.CommandType = CommandType.Text;
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        products.Add(new Product()
                        {
                            IdProduct = Convert.ToInt32(reader["IdProduct"]),
                            nameProduct = reader["NameProduct"].ToString(),
                            descriptionProduct = reader["DescriptionProduct"].ToString(),
                            idCategory = new Category() { Id = Convert.ToInt32(reader["IdCategory"]),descriptionCategory = reader["DescriptionCategory"].ToString() },
                            priceProduct = Convert.ToDecimal(reader["PriceProduct"],new CultureInfo("es-PE")),
                            stockProduct = Convert.ToInt32(reader["StockProduct"]),
                            nameImage = reader["NameImageProduct"].ToString(),
                            routeImage = reader["RouteImageProduct"].ToString(),
                            activeProduct = Convert.ToBoolean(reader["ActiveProduct"])
                        }
                        );
                    }
                }

            }
            catch (Exception)
            {
                products = new List<Product>();
            }
            connection.Close();
            return products;
        }

        public int CreateProduct(Product objProduct, out string Result)
        {
            int autogeneratedID = 0;
            Result = string.Empty;
            try
            {
                SqlCommand command = new SqlCommand("SP_CREATE_PRODUCT_MARKET_PRODUCTS", connection);
                command.Parameters.AddWithValue("NameProduct", objProduct.nameProduct);
                command.Parameters.AddWithValue("DescriptionProduct", objProduct.descriptionProduct);
                command.Parameters.AddWithValue("IdCategory", objProduct.idCategory.Id);
                command.Parameters.AddWithValue("PriceProduct", objProduct.priceProduct);
                command.Parameters.AddWithValue("StockProduct", objProduct.stockProduct);
                command.Parameters.AddWithValue("ActiveProduct", objProduct.activeProduct);
                command.Parameters.Add("MessageSystem", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                command.Parameters.Add("ResultSP", SqlDbType.Int).Direction = ParameterDirection.Output;
                command.CommandType = CommandType.StoredProcedure;
                connection.Open();
                command.ExecuteNonQuery();
                autogeneratedID = Convert.ToInt32(command.Parameters["ResultSP"].Value);
                Result = Convert.ToString(command.Parameters["MessageSystem"].Value);
                connection.Close();

            }
            catch (Exception e)
            {
                autogeneratedID = 0;
                Result = e.Message;
            }

            return autogeneratedID;
        }

        public bool EditProduct(Product objProduct, out string message)
        {
            bool result = false;
            message = string.Empty;
            try
            {
                SqlCommand command = new SqlCommand("SP_EDIT_PRODUCT_MARKET_PRODUCTS", connection);
                command.Parameters.AddWithValue("IdProduct", objProduct.IdProduct);
                command.Parameters.AddWithValue("NameProduct", objProduct.nameProduct);
                command.Parameters.AddWithValue("DescriptionProduct", objProduct.descriptionProduct);
                command.Parameters.AddWithValue("IdCategory", objProduct.idCategory.Id);
                command.Parameters.AddWithValue("PriceProduct", objProduct.priceProduct);
                command.Parameters.AddWithValue("StockProduct", objProduct.stockProduct);
                command.Parameters.AddWithValue("ActiveProduct", objProduct.activeProduct);
                command.Parameters.Add("MessageSystem", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                command.Parameters.Add("ResultSP", SqlDbType.Int).Direction = ParameterDirection.Output;
                command.CommandType = CommandType.StoredProcedure;
                connection.Open();
                command.ExecuteNonQuery();
                result = Convert.ToBoolean(command.Parameters["ResultSP"].Value);
                message = Convert.ToString(command.Parameters["MessageSystem"].Value);
                connection.Close();
            }
            catch (Exception e)
            {
                message = e.Message;
            }
            return result;
        }

        public bool updateImageData(Product product,out string message)
        {
            bool result = false;
            message = String.Empty;
            try
            {
                string query = "UPDATE PRODUCT_MARKET_PRODUCTS SET RouteImageProduct = @ImageRoute, NameImageProduct=@NameImage WHERE IdProduct = @IdProduct";
                SqlCommand command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@ImageRoute", product.routeImage);
                command.Parameters.AddWithValue("@NameImage", product.nameImage);
                command.Parameters.AddWithValue("@IdProduct", product.IdProduct);
                command.CommandType = CommandType.Text;
                connection.Open();

                if(command.ExecuteNonQuery() > 0)
                {
                    result = true;
                }
                else
                {
                    message = "THERE WAS AN ERROR IN THE PROCESS";
                }
      
                connection.Close();

            }
            catch (Exception e)
            {
                result = false;
                message = e.Message;
            }
            return result;
        }

        public bool DeleteProduct(int ID, out string message)
        {
            bool result = false;
            message = string.Empty;
            try
            {
                SqlCommand command = new SqlCommand("SP_DELETE_PRODUCT_MARKET_PRODUCTS", connection);
                command.Parameters.AddWithValue("IdProduct", ID);
                command.Parameters.Add("MessageSystem", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                command.Parameters.Add("ResultSP", SqlDbType.Int).Direction = ParameterDirection.Output;
                command.CommandType = CommandType.StoredProcedure;
                connection.Open();
                command.ExecuteNonQuery();
                result = Convert.ToBoolean(command.Parameters["ResultSP"].Value);
                message = Convert.ToString(command.Parameters["MessageSystem"].Value);
                connection.Close();
            }
            catch (Exception e)
            {
                message = e.Message;
            }
            return result;
        }
    }

    public partial class Connection // Categories
    {
        public List<Category> listCategoriesReturn()
        {
            List<Category> categories = new List<Category>();
            connection.Open();
            try
            {
                string query = "select* from CATEGORY_MARKET_PRODUCTS";
                SqlCommand command = new SqlCommand(query, connection);
                command.CommandType = CommandType.Text;
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        categories.Add(new Category()
                        {
                            Id = Convert.ToInt32(reader["IdCategory"]),
                            activeCategory = Convert.ToBoolean(reader["ActiveCategory"]),
                            descriptionCategory = reader["DescriptionCategory"].ToString()
                        }
                        );
                    }
                }

            }
            catch (Exception)
            {
                categories = new List<Category>();
            }
            connection.Close();
            return categories;
        }

        public int CreateCategory(Category objCategory, out string Result)
        {
            int autogeneratedID = 0;
            Result = string.Empty;
            try
            {
                SqlCommand command = new SqlCommand("SP_CREATE_CATEGORY_MARKET_PRODUCTS", connection);
                command.Parameters.AddWithValue("DescriptionCategory", objCategory.descriptionCategory);
                command.Parameters.AddWithValue("ActiveCategory", objCategory.activeCategory);
                command.Parameters.Add("MessageSystem", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                command.Parameters.Add("ResultSP", SqlDbType.Int).Direction = ParameterDirection.Output;
                command.CommandType = CommandType.StoredProcedure;
                connection.Open();
                command.ExecuteNonQuery();
                autogeneratedID = Convert.ToInt32(command.Parameters["ResultSP"].Value);
                Result = Convert.ToString(command.Parameters["MessageSystem"].Value);
                connection.Close();

            }
            catch (Exception e)
            {
                autogeneratedID = 0;
                Result = e.Message;
            }

            return autogeneratedID;
        }

        public bool EditCategory(Category objCategory, out string message)
        {
            bool result = false;
            message = string.Empty;
            try
            {
                SqlCommand command = new SqlCommand("SP_EDIT_CATEGORY_MARKET_PRODUCTS", connection);
                command.Parameters.AddWithValue("IdCategory", objCategory.Id);
                command.Parameters.AddWithValue("DescriptionCategory", objCategory.descriptionCategory);
                command.Parameters.AddWithValue("ActiveCategory", objCategory.activeCategory);
                command.Parameters.Add("MessageSystem", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                command.Parameters.Add("ResultSP", SqlDbType.Bit).Direction = ParameterDirection.Output;
                command.CommandType = CommandType.StoredProcedure;
                connection.Open();
                command.ExecuteNonQuery();
                message = Convert.ToString(command.Parameters["MessageSystem"].Value);
                result = Convert.ToBoolean(command.Parameters["ResultSP"].Value);
                connection.Close();
            }
            catch (Exception e)
            {
                message = e.Message;
            }
            return result;
        }

        public bool DeleteCategory(int id, out string message) 
        {
            bool result = false;
            message = string.Empty;
            try
            {
                SqlCommand command = new SqlCommand("SP_DELETE_CATEGORY_MARKET_PRODUCTS", connection);
                command.Parameters.AddWithValue("IdCategory", id);
                command.Parameters.Add("MessageSystem", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                command.Parameters.Add("ResultSP", SqlDbType.Bit).Direction = ParameterDirection.Output;
                command.CommandType = CommandType.StoredProcedure;
                connection.Open();
                command.ExecuteNonQuery();
                message = Convert.ToString(command.Parameters["MessageSystem"].Value);
                result = Convert.ToBoolean(command.Parameters["ResultSP"].Value);
                connection.Close();
            }
            catch (Exception e)
            {
                result = false;
                message = e.Message;
            }
            return result;
        }
    }

    public partial class Connection // DASHBOARD 
    {
        public DashBoard SeeSummaryProyect()
        {
            DashBoard dashboard = new DashBoard();
            
            try
            {
                SqlCommand command = new SqlCommand("SP_SUMMARY_DASHBOARD_MARKET_PRODUCTS", connection);
                command.CommandType = CommandType.StoredProcedure;
                connection.Open();

                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        dashboard = new DashBoard()
                        {
                            TotalClient = Convert.ToInt32(reader["TOTALCLIENT"]),
                            TotalSail = Convert.ToInt32(reader["TOTALSAIL"]),
                            TotalProduct = Convert.ToInt32(reader["TOTALPRODUCT"])
                        };
                    }
                }
                connection.Close();
            }
            catch (Exception)
            {
                dashboard = new DashBoard();
            }
            
            return dashboard;
        }

        public List<ReportSale> listReportSaleReturn(string dateStart,string dateEnd,string idTransaction)
        {
            List<ReportSale> reportSales = new List<ReportSale>();
            
            try
            {
                SqlCommand command = new SqlCommand("SP_REPORTSALES_MARKET_PRODUCTS", connection);
                command.Parameters.AddWithValue("dateStart", dateStart);
                command.Parameters.AddWithValue("dateFinal", dateEnd);
                command.Parameters.AddWithValue("idTransaction", idTransaction);
                command.CommandType = CommandType.StoredProcedure;

                connection.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        reportSales.Add(new ReportSale()
                        {
                            dateSale = Convert.ToString(reader["DateRegisterSale"]),
                            client = reader["Client"].ToString(),
                            nameProduct = reader["NameProduct"].ToString(),
                            priceProduct = Convert.ToDecimal(reader["PriceProduct"], new CultureInfo("es-PE")),
                            orderProduct = Convert.ToInt32(reader["OrderProduct"]),
                            totalProduct = Convert.ToDecimal(reader["TotalProduct"], new CultureInfo("es-PE")),
                            idTransaction = Convert.ToString(reader["IdTransactionSale"])
                        }
                        );
                    }
                }

            }
            catch (Exception)
            {
                reportSales = new List<ReportSale>();
            }
            connection.Close();
            return reportSales;
        }

    }

    public partial class Connection // SHOPPINGCART 
    {

        // DEVUELVE EL TOTAL DE PRODUCTOS DENTRO DE UN CARRITO
        public int QuantityShoppingCartProducts(int idClient)
        {
            ShoppingCart shoppingCart = new ShoppingCart();
            try
            {
                SqlCommand command = new SqlCommand("SP_RETURN_TOTAL_SHOPPINGCARTPRODUCTS_MARKET_PRODUCTS", connection);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("IdClient", idClient);
                connection.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        shoppingCart = new ShoppingCart()
                        {
                            totalQuantityTypesProducts = Convert.ToInt32(reader["TOTALSHOPPINGCARTPRODUCTS"])
                        };
                    }
                }
                connection.Close();
            }
            catch (Exception)
            {
                shoppingCart.totalQuantityTypesProducts = 0;
            }
            return shoppingCart.totalQuantityTypesProducts;
        }

        // VERIFICA SI EXISTE PRODUCTOS DENTRO DEL CARRITO
        public bool VerifyExistanceShoppingCart(int idClient, int idProduct) 
        {
            bool result = false;
            
            try
            {
                SqlCommand command = new SqlCommand("SP_VERIFY_SHOPPINGCARTPRODUCTS_MARKET_PRODUCTS", connection);
                command.Parameters.AddWithValue("IdClient", idClient);
                command.Parameters.AddWithValue("IdProduct", idProduct);
                command.Parameters.Add("ResultSP", SqlDbType.Bit).Direction = ParameterDirection.Output;
                command.CommandType = CommandType.StoredProcedure;
                connection.Open();
                command.ExecuteNonQuery();
                result = Convert.ToBoolean(command.Parameters["ResultSP"].Value);
                connection.Close();
            }
            catch (Exception e)
            {
                result = false;
                connection.Close();
            }
            return result;
        }

        // OPERACION DEL CARRITO
        public bool OperationsShoppingCartProducts(int idClient, int idProduct, bool operationSum, out string message)
        { 
            bool result = false;
            message = string.Empty;
            try
            {
                SqlCommand command = new SqlCommand("SP_ACTION_SHOPPING_CART_MARKET_PRODUCTS", connection);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("IdClient", idClient);
                command.Parameters.AddWithValue("IdProduct", idProduct);
                command.Parameters.AddWithValue("SumOperation", operationSum);
                command.Parameters.Add("MessageSystem", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                command.Parameters.Add("ResultSP", SqlDbType.Int).Direction = ParameterDirection.Output;
                connection.Open();
                command.ExecuteNonQuery();
                result = Convert.ToBoolean(command.Parameters["ResultSP"].Value);
                message = Convert.ToString(command.Parameters["MessageSystem"].Value);
                connection.Close();

            }
            catch (Exception e)
            {
                result = false;
                message = e.Message;
                connection.Close();
            }

            return result;
        }

        // ELIMINAR PRODUCTO DEL CARRITO
        public bool DeleteShoppingCartProduct(int IdProduct,int IdClient,out string message)
        {
            bool result = false;
            message = string.Empty;
            try
            {
                SqlCommand command = new SqlCommand("SP_DELETEPRODUCT_SHOPPINGCART_MARKET_PRODUCTS", connection);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("IdClient", IdClient);
                command.Parameters.AddWithValue("IdProduct", IdProduct);
                command.Parameters.Add("MessageSystem", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                command.Parameters.Add("ResultSP", SqlDbType.Int).Direction = ParameterDirection.Output;
                connection.Open();
                command.ExecuteNonQuery();
                result = Convert.ToBoolean(command.Parameters["ResultSP"].Value);
                message = Convert.ToString(command.Parameters["MessageSystem"].Value);
                connection.Close();
            }
            catch(Exception e)
            {
                result = false;
                message = e.Message;
                connection.Close();
            }
            return result; 
        }

        public List<ShoppingCart> ListShoppingCartProducts(int IdClient)
        {
            List<ShoppingCart> shoppingCarts = new List<ShoppingCart>();
            connection.Open();
            try
            {

                string query = "SELECT*FROM FN_RETURN_SHOPPINGCART_TABLE_MARKETPRODUCT(@IdClient)";

                SqlCommand command = new SqlCommand(query, connection);

                command.Parameters.AddWithValue("@IdClient", IdClient);
                command.CommandType = CommandType.Text;

                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        shoppingCarts.Add(new ShoppingCart()
                        {
                            IdProduct = new Product()
                            {
                                IdProduct = Convert.ToInt32(reader["IdProduct"]),
                                nameProduct = reader["NameProduct"].ToString(),
                                idCategory = new Category()
                                {
                                    descriptionCategory = reader["DescriptionCategory"].ToString()
                                },
                                descriptionProduct = reader["DescriptionProduct"].ToString(),
                                priceProduct = Convert.ToDecimal(reader["PriceProduct"], new CultureInfo("es-PE")),
                                nameImage = reader["NameImageProduct"].ToString(),
                                routeImage = reader["RouteImageProduct"].ToString(),
                            },
                            orderProduct = Convert.ToInt32(reader["OrderShoppingCart"])
                        }

                        );
                    }
                }

            }
            catch (Exception)
            {
                shoppingCarts = new List<ShoppingCart>();
            }
            connection.Close();
            return shoppingCarts;
        }
        

    }

    public partial class Connection // LOCATION
    {
        public List<Province> listProvinceReturn(string idDepartment)
        {
            List<Province> provinces = new List<Province>();
            connection.Open();
            try
            {
                string query = "SELECT*FROM PROVINCE_MARKET_PRODUCTS WHERE IdDepartment = @IdDepartment";
                SqlCommand command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@IdDepartment", idDepartment);
                command.CommandType = CommandType.Text;
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        provinces.Add(new Province()
                        {
                            Id = reader["IdProvince"].ToString(),
                            description = reader["DescriptionProvince"].ToString()
                        }
                        );
                    }
                }

            }
            catch (Exception)
            {
                provinces = new List<Province>();
            }
            connection.Close();
            return provinces;
        }

        public List<District> listDistrictReturn(string idDepartment,string idProvince)
        {
            List<District> districts = new List<District>();
            connection.Open();
            try
            {
                string query = "SELECT*FROM DISTRICT_MARKET_PRODUCTS WHERE IdDepartment = @IdDepartment and IdProvince = @IdProvince";

                SqlCommand command = new SqlCommand(query, connection);

                command.Parameters.AddWithValue("@IdDepartment", idDepartment);
                command.Parameters.AddWithValue("@IdProvince", idProvince);


                command.CommandType = CommandType.Text;
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        districts.Add(new District()
                        {
                            Id = reader["IdDistrict"].ToString(),
                            description = reader["DescriptionDistrict"].ToString()
                        }
                        );
                    }
                }

            }
            catch (Exception)
            {
                districts = new List<District>();
            }
            connection.Close();
            return districts;
        }

        public List<Department> listDepartmentReturn()
        {
            List<Department> departments = new List<Department>();
            connection.Open();
            try
            {
                string query = "SELECT*FROM DEPARTMENT_MARKET_PRODUCTS";

                SqlCommand command = new SqlCommand(query, connection);
                command.CommandType = CommandType.Text;
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        departments.Add(new Department()
                        {
                            Id = reader["IdDepartment"].ToString(),
                            description = reader["DescriptionDeparment"].ToString()
                        }
                        );
                    }
                }

            }
            catch (Exception)
            {
                departments = new List<Department>();
            }
            connection.Close();
            return departments;
        }
    }

    public partial class Connection // SAIL AND DETAILSALE BUSINESS
    {
        public bool FinishProcessSale(Sale objSale,DataTable detailSale,out string message)
        {
            bool result = false;

            message = string.Empty;

            try
            {
                SqlCommand command = new SqlCommand("SP_COMPLETE_PROCESS_SAIL_MARKET_PRODUCTS", connection);
                command.CommandType = CommandType.StoredProcedure;
                command.Parameters.AddWithValue("IdClient", objSale.IdClient);
                command.Parameters.AddWithValue("TotalSaleCost", objSale.totalSaleCost);
                command.Parameters.AddWithValue("ContactClient", objSale.contactSale);
                command.Parameters.AddWithValue("IdDistrict", objSale.IdDistrict);
                command.Parameters.AddWithValue("TelephoneNumber", objSale.telephoneClient);
                command.Parameters.AddWithValue("AddressClient", objSale.addressClient);
                command.Parameters.AddWithValue("IdTransaction",objSale.IdTransaction);
                command.Parameters.AddWithValue("DetailSale", detailSale);
                command.Parameters.Add("MessageSystem", SqlDbType.VarChar, 500).Direction = ParameterDirection.Output;
                command.Parameters.Add("ResultSP", SqlDbType.Int).Direction = ParameterDirection.Output;
                connection.Open();
                command.ExecuteNonQuery();
                result = Convert.ToBoolean(command.Parameters["ResultSP"].Value);
                message = Convert.ToString(command.Parameters["MessageSystem"].Value);
                connection.Close();
            }
            catch(Exception e)
            {
                result = false;
                message = e.Message;
            }

            return result;
        }

        public List<DetailSale> ListSales(int IdClient)
        {
            List<DetailSale> shoppingCarts = new List<DetailSale>();
            connection.Open();
            try
            {

                string query = "SELECT*FROM FN_LIST_SALES_CLIENT(@IdClient)";

                SqlCommand command = new SqlCommand(query, connection);

                command.Parameters.AddWithValue("@IdClient", IdClient);
                command.CommandType = CommandType.Text;

                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        shoppingCarts.Add(new DetailSale()
                        {
                            IdProduct = new Product()
                            {
                                nameProduct = reader["NameProduct"].ToString(),
                                priceProduct = Convert.ToDecimal(reader["PriceProduct"], new CultureInfo("es-PE")),
                                nameImage = reader["NameImageProduct"].ToString(),
                                routeImage = reader["RouteImageProduct"].ToString(),
                            },
                            orderProduct = Convert.ToInt32(reader["OrderProduct"]),
                            totalProduct = Convert.ToInt32(reader["TotalProduct"]),
                            IdTransaction = Convert.ToString(reader["IdTransactionSale"])
                        }
                        );
                    }
                }

            }
            catch (Exception)
            {
                shoppingCarts = new List<DetailSale>();
            }
            connection.Close();
            return shoppingCarts;
        }

        public List<ShoppingProduct> listHistorialShopping(string dateStart, string dateEnd, string idTransaction)
        {
            var shoppingProducts = new List<ShoppingProduct>();

            try
            {
                SqlCommand command = new SqlCommand("SP_HISTORIALSHOPPING", connection);
                command.Parameters.AddWithValue("dateStart", dateStart);
                command.Parameters.AddWithValue("dateFinal", dateEnd);
                command.Parameters.AddWithValue("idTransaction", idTransaction);
                command.CommandType = CommandType.StoredProcedure;

                connection.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        shoppingProducts.Add(new ShoppingProduct()
                        {
                            DateRegisterSale = Convert.ToString(reader["DateRegisterSale"]),
                            RouteImageProduct = reader["RouteImageProduct"].ToString(),
                            NameProduct = reader["NameProduct"].ToString(),
                            OrderProduct = Convert.ToInt32(reader["OrderProduct"]),
                            PriceProduct = Convert.ToDecimal(reader["PriceProduct"], new CultureInfo("es-PE")),
                            TotalProduct = Convert.ToDecimal(reader["TotalProduct"], new CultureInfo("es-PE")),
                            IdTransaction = Convert.ToString(reader["IdTransactionSale"]),
                            NameImageProduct = Convert.ToString(reader["NameImageProduct"])
                        }
                        );
                    }
                }

            }
            catch (Exception)
            {
                shoppingProducts = new List<ShoppingProduct>();
            }
            connection.Close();
            return shoppingProducts;
        }
    }

    public partial class Connection // SUMMARY GRAPHICS
    {
        public List<ReportGraphics> reportGraphicsDatabase()
        {
            List<ReportGraphics> reportGraphics = new List<ReportGraphics>();

            string query = "SP_FILTER_DATE_SALES_GRAPHICS";

            try
            {
                SqlCommand command = new SqlCommand(query, connection);
                command.CommandType = CommandType.StoredProcedure;

                connection.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        reportGraphics.Add(new ReportGraphics()
                        {
                            month = reader["NombreMes"].ToString(),
                            quantity = Convert.ToInt32(reader["TotalVentas"])
                        });
                    }
                }
            }
            catch(Exception ex)
            {
                reportGraphics = new List<ReportGraphics>();
            }
            return reportGraphics; 
        }

        public List<ReportProductGraphics> reportProductGraphicsDatabase()
        {
            List<ReportProductGraphics> reportProducts = new List<ReportProductGraphics>();

            string query = "SP_FILTER_PRODUCTS";

            try
            {
                SqlCommand command = new SqlCommand(query, connection);
                command.CommandType = CommandType.StoredProcedure;

                connection.Open();
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        reportProducts.Add(new ReportProductGraphics()
                        {
                            nameProduct = reader["NameProduct"].ToString(),
                            quantity = Convert.ToInt32(reader["QuantitySales"])
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                reportProducts = new List<ReportProductGraphics>();
            }
            return reportProducts;
        }
    }


}
